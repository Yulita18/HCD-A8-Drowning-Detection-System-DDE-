{"id":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","dependencies":[{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\package.json","includedInParent":true,"mtime":1636883241532},{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\.babelrc","includedInParent":true,"mtime":1634828519177},{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\scatter-gl\\package.json","includedInParent":true,"mtime":1634828546977},{"name":"three","loc":{"line":3,"column":20},"parent":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\scatter-gl\\dist\\scatter_plot_visualizer_sprites.js","resolved":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\three\\build\\three.module.js"},{"name":"./render","loc":{"line":4,"column":23},"parent":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\scatter-gl\\dist\\scatter_plot_visualizer_sprites.js","resolved":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\scatter-gl\\dist\\render.js"},{"name":"./util","loc":{"line":5,"column":19},"parent":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\scatter-gl\\dist\\scatter_plot_visualizer_sprites.js","resolved":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\scatter-gl\\dist\\util.js"},{"name":"./constants","loc":{"line":6,"column":26},"parent":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\scatter-gl\\dist\\scatter_plot_visualizer_sprites.js","resolved":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\scatter-gl\\dist\\constants.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar THREE = require(\"three\");\r\nvar render_1 = require(\"./render\");\r\nvar util = require(\"./util\");\r\nvar constants_1 = require(\"./constants\");\r\nvar makeVertexShader = function (minPointSize) { return \"\\n    // Index of the specific vertex (passed in as bufferAttribute), and the\\n    // variable that will be used to pass it to the fragment shader.\\n    attribute float spriteIndex;\\n    attribute vec4 color;\\n    attribute float scaleFactor;\\n\\n    varying vec2 xyIndex;\\n    varying vec4 vColor;\\n\\n    uniform bool sizeAttenuation;\\n    uniform float pointSize;\\n    uniform float spritesPerRow;\\n    uniform float spritesPerColumn;\\n\\n    varying float fogDepth;\\n\\n    void main() {\\n      // Pass index and color values to fragment shader.\\n      vColor = color;\\n      xyIndex = vec2(mod(spriteIndex, spritesPerRow),\\n                floor(spriteIndex / spritesPerColumn));\\n\\n      // Transform current vertex by modelViewMatrix (model world position and\\n      // camera world position matrix).\\n      vec4 cameraSpacePos = modelViewMatrix * vec4(position, 1.0);\\n\\n      // Project vertex in camera-space to screen coordinates using the camera's\\n      // projection matrix.\\n      gl_Position = projectionMatrix * cameraSpacePos;\\n\\n      // Create size attenuation (if we're in 3D mode) by making the size of\\n      // each point inversly proportional to its distance to the camera.\\n      float outputPointSize = pointSize;\\n      if (sizeAttenuation) {\\n        outputPointSize = -pointSize / cameraSpacePos.z;\\n        fogDepth = pointSize / outputPointSize * 1.2;\\n      } else {  // Create size attenuation (if we're in 2D mode)\\n        const float PI = 3.1415926535897932384626433832795;\\n        const float minScale = 0.1;  // minimum scaling factor\\n        const float outSpeed = 2.0;  // shrink speed when zooming out\\n        const float outNorm = (1. - minScale) / atan(outSpeed);\\n        const float maxScale = 15.0;  // maximum scaling factor\\n        const float inSpeed = 0.02;  // enlarge speed when zooming in\\n        const float zoomOffset = 0.3;  // offset zoom pivot\\n        float zoom = projectionMatrix[0][0] + zoomOffset;  // zoom pivot\\n        float scale = zoom < 1. ? 1. + outNorm * atan(outSpeed * (zoom - 1.)) :\\n                      1. + 2. / PI * (maxScale - 1.) * atan(inSpeed * (zoom - 1.));\\n        outputPointSize = pointSize * scale;\\n      }\\n\\n      gl_PointSize =\\n        max(outputPointSize * scaleFactor, \" + minPointSize.toFixed(1) + \");\\n    }\"; };\r\nvar FRAGMENT_SHADER_POINT_TEST_CHUNK = \"\\n    bool point_in_unit_circle(vec2 spriteCoord) {\\n      vec2 centerToP = spriteCoord - vec2(0.5, 0.5);\\n      return dot(centerToP, centerToP) < (0.5 * 0.5);\\n    }\\n\\n    bool point_in_unit_equilateral_triangle(vec2 spriteCoord) {\\n      vec3 v0 = vec3(0, 1, 0);\\n      vec3 v1 = vec3(0.5, 0, 0);\\n      vec3 v2 = vec3(1, 1, 0);\\n      vec3 p = vec3(spriteCoord, 0);\\n      float p_in_v0_v1 = cross(v1 - v0, p - v0).z;\\n      float p_in_v1_v2 = cross(v2 - v1, p - v1).z;\\n      return (p_in_v0_v1 > 0.0) && (p_in_v1_v2 > 0.0);\\n    }\\n\\n    bool point_in_unit_square(vec2 spriteCoord) {\\n      return true;\\n    }\\n  \";\r\nvar FRAGMENT_SHADER = \"\\n    varying vec2 xyIndex;\\n    varying vec4 vColor;\\n\\n    uniform sampler2D texture;\\n    uniform float spritesPerRow;\\n    uniform float spritesPerColumn;\\n    uniform bool isImage;\\n\\n    \" + THREE.ShaderChunk['common'] + \"\\n    \" + FRAGMENT_SHADER_POINT_TEST_CHUNK + \"\\n    uniform vec3 fogColor;\\n    varying float fogDepth;\\n\\t\\tuniform float fogNear;\\n    uniform float fogFar;\\n\\n    void main() {\\n      if (isImage) {\\n        // Coordinates of the vertex within the entire sprite image.\\n        vec2 coords =\\n          (gl_PointCoord + xyIndex) / vec2(spritesPerRow, spritesPerColumn);\\n        gl_FragColor = vColor * texture2D(texture, coords);\\n      } else {\\n        bool inside = point_in_unit_circle(gl_PointCoord);\\n        if (!inside) {\\n          discard;\\n        }\\n        gl_FragColor = vColor;\\n      }\\n      float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n      gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n    }\";\r\nvar FRAGMENT_SHADER_PICKING = \"\\n    varying vec2 xyIndex;\\n    varying vec4 vColor;\\n    uniform bool isImage;\\n\\n    \" + FRAGMENT_SHADER_POINT_TEST_CHUNK + \"\\n\\n    varying float fogDepth;\\n\\n    void main() {\\n      xyIndex; // Silence 'unused variable' warning.\\n      fogDepth; // Silence 'unused variable' warning.\\n      if (isImage) {\\n        gl_FragColor = vColor;\\n      } else {\\n        bool inside = point_in_unit_circle(gl_PointCoord);\\n        if (!inside) {\\n          discard;\\n        }\\n        gl_FragColor = vColor;\\n      }\\n    }\";\r\nvar ScatterPlotVisualizerSprites = (function () {\r\n    function ScatterPlotVisualizerSprites(styles, spriteSheetParams) {\r\n        this.styles = styles;\r\n        this.id = 'SPRITES';\r\n        this.isSpriteSheetMode = false;\r\n        this.spritesPerRow = 0;\r\n        this.spritesPerColumn = 0;\r\n        this.spriteDimensions = [0, 0];\r\n        this.worldSpacePointPositions = new Float32Array(0);\r\n        this.pickingColors = new Float32Array(0);\r\n        this.renderColors = new Float32Array(0);\r\n        this.standinTextureForPoints = util.createTextureFromCanvas(document.createElement('canvas'));\r\n        if (spriteSheetParams) {\r\n            this.spriteSheetParams = spriteSheetParams;\r\n            this.setSpriteSheet(spriteSheetParams);\r\n            this.isSpriteSheetMode = true;\r\n        }\r\n        this.renderMaterial = this.createRenderMaterial();\r\n        this.pickingMaterial = this.createPickingMaterial();\r\n    }\r\n    ScatterPlotVisualizerSprites.prototype.createUniforms = function () {\r\n        return {\r\n            texture: { type: 't' },\r\n            spritesPerRow: { type: 'f' },\r\n            spritesPerColumn: { type: 'f' },\r\n            fogColor: { type: 'c' },\r\n            fogNear: { type: 'f' },\r\n            fogFar: { type: 'f' },\r\n            isImage: { type: 'bool' },\r\n            sizeAttenuation: { type: 'bool' },\r\n            pointSize: { type: 'f' },\r\n        };\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.createRenderMaterial = function () {\r\n        var isSpriteSheetMode = this.isSpriteSheetMode;\r\n        var uniforms = this.createUniforms();\r\n        return new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: makeVertexShader(this.styles.sprites.minPointSize),\r\n            fragmentShader: FRAGMENT_SHADER,\r\n            transparent: true,\r\n            depthFunc: THREE.LessDepth,\r\n            fog: this.styles.fog.enabled,\r\n            blending: THREE.NormalBlending,\r\n        });\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.createPickingMaterial = function () {\r\n        var uniforms = this.createUniforms();\r\n        return new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: makeVertexShader(this.styles.sprites.minPointSize),\r\n            fragmentShader: FRAGMENT_SHADER_PICKING,\r\n            transparent: true,\r\n            depthTest: true,\r\n            depthWrite: true,\r\n            fog: false,\r\n            blending: THREE.NormalBlending,\r\n        });\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.createPointSprites = function (scene, positions) {\r\n        var pointCount = positions != null ? positions.length / constants_1.XYZ_NUM_ELEMENTS : 0;\r\n        var geometry = this.createGeometry(pointCount);\r\n        this.fog = new THREE.Fog(0xffffff);\r\n        this.points = new THREE.Points(geometry, this.renderMaterial);\r\n        this.points.frustumCulled = false;\r\n        if (this.spriteIndexBufferAttribute != null) {\r\n            this.points.geometry.setAttribute('spriteIndex', this.spriteIndexBufferAttribute);\r\n        }\r\n        scene.add(this.points);\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.calculatePointSize = function (sceneIs3D) {\r\n        var imageSize = this.styles.sprites.imageSize;\r\n        if (this.texture) {\r\n            return sceneIs3D ? imageSize : this.spriteDimensions[0];\r\n        }\r\n        var n = this.worldSpacePointPositions != null\r\n            ? this.worldSpacePointPositions.length / constants_1.XYZ_NUM_ELEMENTS\r\n            : 1;\r\n        var SCALE = 200;\r\n        var LOG_BASE = 8;\r\n        var DIVISOR = 1.5;\r\n        var pointSize = SCALE / Math.log(n) / Math.log(LOG_BASE);\r\n        return sceneIs3D ? pointSize : pointSize / DIVISOR;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.createGeometry = function (pointCount) {\r\n        var n = pointCount;\r\n        this.pickingColors = new Float32Array(n * constants_1.RGBA_NUM_ELEMENTS);\r\n        {\r\n            var dst = 0;\r\n            for (var i = 0; i < n; i++) {\r\n                var c = new THREE.Color(i);\r\n                this.pickingColors[dst++] = c.r;\r\n                this.pickingColors[dst++] = c.g;\r\n                this.pickingColors[dst++] = c.b;\r\n                this.pickingColors[dst++] = 1;\r\n            }\r\n        }\r\n        var geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array([]), constants_1.XYZ_NUM_ELEMENTS));\r\n        geometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array([]), constants_1.RGBA_NUM_ELEMENTS));\r\n        geometry.setAttribute('scaleFactor', new THREE.BufferAttribute(new Float32Array([]), constants_1.INDEX_NUM_ELEMENTS));\r\n        geometry.computeVertexNormals();\r\n        return geometry;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.setFogDistances = function (sceneIs3D, nearestPointZ, farthestPointZ) {\r\n        var _a = this.styles.fog, threshold = _a.threshold, enabled = _a.enabled;\r\n        if (sceneIs3D && enabled) {\r\n            var n = this.worldSpacePointPositions.length / constants_1.XYZ_NUM_ELEMENTS;\r\n            this.fog.near = nearestPointZ;\r\n            var multiplier = 2 - Math.min(n, threshold) / threshold;\r\n            this.fog.far = farthestPointZ * multiplier;\r\n        }\r\n        else {\r\n            this.fog.near = Infinity;\r\n            this.fog.far = Infinity;\r\n        }\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.dispose = function () {\r\n        this.disposeGeometry();\r\n        this.disposeSpriteSheet();\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.disposeGeometry = function () {\r\n        if (this.points != null) {\r\n            this.scene.remove(this.points);\r\n            this.points.geometry.dispose();\r\n            this.points = null;\r\n            this.worldSpacePointPositions = null;\r\n        }\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.disposeSpriteSheet = function () {\r\n        if (this.texture) {\r\n            this.texture.dispose();\r\n        }\r\n        this.texture = null;\r\n        this.renderMaterial = null;\r\n        this.pickingMaterial = null;\r\n        this.spriteSheetImage = null;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.setScene = function (scene) {\r\n        this.scene = scene;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.setSpriteSheet = function (spriteSheetParams) {\r\n        var _this = this;\r\n        var spriteDimensions = spriteSheetParams.spriteDimensions, spriteIndices = spriteSheetParams.spriteIndices, onImageLoad = spriteSheetParams.onImageLoad;\r\n        var spriteSheet = spriteSheetParams.spritesheetImage;\r\n        if (typeof spriteSheet === 'string') {\r\n            var spriteSheetUrl = spriteSheet;\r\n            spriteSheet = new Image();\r\n            spriteSheet.src = spriteSheetUrl;\r\n        }\r\n        this.spriteSheetImage = spriteSheet;\r\n        this.texture = util.createTextureFromImage(this.spriteSheetImage, function () {\r\n            _this.spritesPerRow = _this.spriteSheetImage.width / spriteDimensions[0];\r\n            _this.spritesPerColumn =\r\n                _this.spriteSheetImage.height / spriteDimensions[1];\r\n            onImageLoad();\r\n        });\r\n        this.spriteDimensions = spriteDimensions;\r\n        this.spriteIndexBufferAttribute = new THREE.BufferAttribute(spriteIndices, constants_1.INDEX_NUM_ELEMENTS);\r\n        if (this.points != null) {\r\n            this.points.geometry.setAttribute('spriteIndex', this.spriteIndexBufferAttribute);\r\n        }\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.onPointPositionsChanged = function (newPositions) {\r\n        if (this.points != null) {\r\n            if (this.worldSpacePointPositions.length !== newPositions.length) {\r\n                this.disposeGeometry();\r\n            }\r\n        }\r\n        this.worldSpacePointPositions = newPositions;\r\n        if (this.points == null) {\r\n            this.createPointSprites(this.scene, newPositions);\r\n        }\r\n        if (this.spriteSheetParams) {\r\n            this.setSpriteSheet(this.spriteSheetParams);\r\n        }\r\n        this.renderMaterial = this.createRenderMaterial();\r\n        this.pickingMaterial = this.createPickingMaterial();\r\n        var positions = this.points\r\n            .geometry.getAttribute('position');\r\n        positions.array = newPositions;\r\n        positions.count = newPositions.length / constants_1.XYZ_NUM_ELEMENTS;\r\n        positions.needsUpdate = true;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.onPickingRender = function (rc) {\r\n        var sceneIs3D = rc.cameraType === render_1.CameraType.Perspective;\r\n        this.pickingMaterial.uniforms.spritesPerRow.value = this.spritesPerRow;\r\n        this.pickingMaterial.uniforms.spritesPerRow.value = this.spritesPerColumn;\r\n        this.pickingMaterial.uniforms.sizeAttenuation.value = sceneIs3D;\r\n        this.pickingMaterial.uniforms.pointSize.value = this.calculatePointSize(sceneIs3D);\r\n        this.points.material = this.pickingMaterial;\r\n        var colors = this.points.geometry.getAttribute('color');\r\n        colors.array = this.pickingColors;\r\n        colors.count = this.pickingColors.length / constants_1.RGBA_NUM_ELEMENTS;\r\n        colors.needsUpdate = true;\r\n        var scaleFactors = this.points\r\n            .geometry.getAttribute('scaleFactor');\r\n        scaleFactors.array = rc.pointScaleFactors;\r\n        scaleFactors.count = rc.pointScaleFactors.length;\r\n        scaleFactors.count = rc.pointScaleFactors.length / constants_1.INDEX_NUM_ELEMENTS;\r\n        scaleFactors.needsUpdate = true;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.onRender = function (rc) {\r\n        var sceneIs3D = rc.camera instanceof THREE.PerspectiveCamera;\r\n        this.setFogDistances(sceneIs3D, rc.nearestCameraSpacePointZ, rc.farthestCameraSpacePointZ);\r\n        this.scene.fog = this.fog;\r\n        this.scene.fog.color = new THREE.Color(rc.backgroundColor);\r\n        this.renderMaterial.uniforms.fogColor.value = this.scene.fog.color;\r\n        this.renderMaterial.uniforms.fogNear.value = this.fog.near;\r\n        this.renderMaterial.uniforms.fogFar.value = this.fog.far;\r\n        this.renderMaterial.uniforms.spritesPerRow.value = this.spritesPerRow;\r\n        this.renderMaterial.uniforms.spritesPerColumn.value = this.spritesPerColumn;\r\n        this.renderMaterial.uniforms.isImage.value = this.texture != null;\r\n        this.renderMaterial.uniforms.texture.value =\r\n            this.texture != null ? this.texture : this.standinTextureForPoints;\r\n        this.renderMaterial.uniforms.sizeAttenuation.value = sceneIs3D;\r\n        this.renderMaterial.uniforms.pointSize.value = this.calculatePointSize(sceneIs3D);\r\n        this.points.material = this.renderMaterial;\r\n        var colors = this.points.geometry.getAttribute('color');\r\n        this.renderColors = rc.pointColors;\r\n        colors.array = this.renderColors;\r\n        colors.count = this.renderColors.length / constants_1.RGBA_NUM_ELEMENTS;\r\n        colors.needsUpdate = true;\r\n        var scaleFactors = this.points\r\n            .geometry.getAttribute('scaleFactor');\r\n        scaleFactors.array = rc.pointScaleFactors;\r\n        scaleFactors.count = rc.pointScaleFactors.length / constants_1.INDEX_NUM_ELEMENTS;\r\n        scaleFactors.needsUpdate = true;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.onResize = function (newWidth, newHeight) { };\r\n    return ScatterPlotVisualizerSprites;\r\n}());\r\nexports.ScatterPlotVisualizerSprites = ScatterPlotVisualizerSprites;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}}],"sources":{"node_modules/scatter-gl/dist/scatter_plot_visualizer_sprites.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar THREE = require(\"three\");\r\nvar render_1 = require(\"./render\");\r\nvar util = require(\"./util\");\r\nvar constants_1 = require(\"./constants\");\r\nvar makeVertexShader = function (minPointSize) { return \"\\n    // Index of the specific vertex (passed in as bufferAttribute), and the\\n    // variable that will be used to pass it to the fragment shader.\\n    attribute float spriteIndex;\\n    attribute vec4 color;\\n    attribute float scaleFactor;\\n\\n    varying vec2 xyIndex;\\n    varying vec4 vColor;\\n\\n    uniform bool sizeAttenuation;\\n    uniform float pointSize;\\n    uniform float spritesPerRow;\\n    uniform float spritesPerColumn;\\n\\n    varying float fogDepth;\\n\\n    void main() {\\n      // Pass index and color values to fragment shader.\\n      vColor = color;\\n      xyIndex = vec2(mod(spriteIndex, spritesPerRow),\\n                floor(spriteIndex / spritesPerColumn));\\n\\n      // Transform current vertex by modelViewMatrix (model world position and\\n      // camera world position matrix).\\n      vec4 cameraSpacePos = modelViewMatrix * vec4(position, 1.0);\\n\\n      // Project vertex in camera-space to screen coordinates using the camera's\\n      // projection matrix.\\n      gl_Position = projectionMatrix * cameraSpacePos;\\n\\n      // Create size attenuation (if we're in 3D mode) by making the size of\\n      // each point inversly proportional to its distance to the camera.\\n      float outputPointSize = pointSize;\\n      if (sizeAttenuation) {\\n        outputPointSize = -pointSize / cameraSpacePos.z;\\n        fogDepth = pointSize / outputPointSize * 1.2;\\n      } else {  // Create size attenuation (if we're in 2D mode)\\n        const float PI = 3.1415926535897932384626433832795;\\n        const float minScale = 0.1;  // minimum scaling factor\\n        const float outSpeed = 2.0;  // shrink speed when zooming out\\n        const float outNorm = (1. - minScale) / atan(outSpeed);\\n        const float maxScale = 15.0;  // maximum scaling factor\\n        const float inSpeed = 0.02;  // enlarge speed when zooming in\\n        const float zoomOffset = 0.3;  // offset zoom pivot\\n        float zoom = projectionMatrix[0][0] + zoomOffset;  // zoom pivot\\n        float scale = zoom < 1. ? 1. + outNorm * atan(outSpeed * (zoom - 1.)) :\\n                      1. + 2. / PI * (maxScale - 1.) * atan(inSpeed * (zoom - 1.));\\n        outputPointSize = pointSize * scale;\\n      }\\n\\n      gl_PointSize =\\n        max(outputPointSize * scaleFactor, \" + minPointSize.toFixed(1) + \");\\n    }\"; };\r\nvar FRAGMENT_SHADER_POINT_TEST_CHUNK = \"\\n    bool point_in_unit_circle(vec2 spriteCoord) {\\n      vec2 centerToP = spriteCoord - vec2(0.5, 0.5);\\n      return dot(centerToP, centerToP) < (0.5 * 0.5);\\n    }\\n\\n    bool point_in_unit_equilateral_triangle(vec2 spriteCoord) {\\n      vec3 v0 = vec3(0, 1, 0);\\n      vec3 v1 = vec3(0.5, 0, 0);\\n      vec3 v2 = vec3(1, 1, 0);\\n      vec3 p = vec3(spriteCoord, 0);\\n      float p_in_v0_v1 = cross(v1 - v0, p - v0).z;\\n      float p_in_v1_v2 = cross(v2 - v1, p - v1).z;\\n      return (p_in_v0_v1 > 0.0) && (p_in_v1_v2 > 0.0);\\n    }\\n\\n    bool point_in_unit_square(vec2 spriteCoord) {\\n      return true;\\n    }\\n  \";\r\nvar FRAGMENT_SHADER = \"\\n    varying vec2 xyIndex;\\n    varying vec4 vColor;\\n\\n    uniform sampler2D texture;\\n    uniform float spritesPerRow;\\n    uniform float spritesPerColumn;\\n    uniform bool isImage;\\n\\n    \" + THREE.ShaderChunk['common'] + \"\\n    \" + FRAGMENT_SHADER_POINT_TEST_CHUNK + \"\\n    uniform vec3 fogColor;\\n    varying float fogDepth;\\n\\t\\tuniform float fogNear;\\n    uniform float fogFar;\\n\\n    void main() {\\n      if (isImage) {\\n        // Coordinates of the vertex within the entire sprite image.\\n        vec2 coords =\\n          (gl_PointCoord + xyIndex) / vec2(spritesPerRow, spritesPerColumn);\\n        gl_FragColor = vColor * texture2D(texture, coords);\\n      } else {\\n        bool inside = point_in_unit_circle(gl_PointCoord);\\n        if (!inside) {\\n          discard;\\n        }\\n        gl_FragColor = vColor;\\n      }\\n      float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n      gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n    }\";\r\nvar FRAGMENT_SHADER_PICKING = \"\\n    varying vec2 xyIndex;\\n    varying vec4 vColor;\\n    uniform bool isImage;\\n\\n    \" + FRAGMENT_SHADER_POINT_TEST_CHUNK + \"\\n\\n    varying float fogDepth;\\n\\n    void main() {\\n      xyIndex; // Silence 'unused variable' warning.\\n      fogDepth; // Silence 'unused variable' warning.\\n      if (isImage) {\\n        gl_FragColor = vColor;\\n      } else {\\n        bool inside = point_in_unit_circle(gl_PointCoord);\\n        if (!inside) {\\n          discard;\\n        }\\n        gl_FragColor = vColor;\\n      }\\n    }\";\r\nvar ScatterPlotVisualizerSprites = (function () {\r\n    function ScatterPlotVisualizerSprites(styles, spriteSheetParams) {\r\n        this.styles = styles;\r\n        this.id = 'SPRITES';\r\n        this.isSpriteSheetMode = false;\r\n        this.spritesPerRow = 0;\r\n        this.spritesPerColumn = 0;\r\n        this.spriteDimensions = [0, 0];\r\n        this.worldSpacePointPositions = new Float32Array(0);\r\n        this.pickingColors = new Float32Array(0);\r\n        this.renderColors = new Float32Array(0);\r\n        this.standinTextureForPoints = util.createTextureFromCanvas(document.createElement('canvas'));\r\n        if (spriteSheetParams) {\r\n            this.spriteSheetParams = spriteSheetParams;\r\n            this.setSpriteSheet(spriteSheetParams);\r\n            this.isSpriteSheetMode = true;\r\n        }\r\n        this.renderMaterial = this.createRenderMaterial();\r\n        this.pickingMaterial = this.createPickingMaterial();\r\n    }\r\n    ScatterPlotVisualizerSprites.prototype.createUniforms = function () {\r\n        return {\r\n            texture: { type: 't' },\r\n            spritesPerRow: { type: 'f' },\r\n            spritesPerColumn: { type: 'f' },\r\n            fogColor: { type: 'c' },\r\n            fogNear: { type: 'f' },\r\n            fogFar: { type: 'f' },\r\n            isImage: { type: 'bool' },\r\n            sizeAttenuation: { type: 'bool' },\r\n            pointSize: { type: 'f' },\r\n        };\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.createRenderMaterial = function () {\r\n        var isSpriteSheetMode = this.isSpriteSheetMode;\r\n        var uniforms = this.createUniforms();\r\n        return new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: makeVertexShader(this.styles.sprites.minPointSize),\r\n            fragmentShader: FRAGMENT_SHADER,\r\n            transparent: true,\r\n            depthFunc: THREE.LessDepth,\r\n            fog: this.styles.fog.enabled,\r\n            blending: THREE.NormalBlending,\r\n        });\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.createPickingMaterial = function () {\r\n        var uniforms = this.createUniforms();\r\n        return new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: makeVertexShader(this.styles.sprites.minPointSize),\r\n            fragmentShader: FRAGMENT_SHADER_PICKING,\r\n            transparent: true,\r\n            depthTest: true,\r\n            depthWrite: true,\r\n            fog: false,\r\n            blending: THREE.NormalBlending,\r\n        });\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.createPointSprites = function (scene, positions) {\r\n        var pointCount = positions != null ? positions.length / constants_1.XYZ_NUM_ELEMENTS : 0;\r\n        var geometry = this.createGeometry(pointCount);\r\n        this.fog = new THREE.Fog(0xffffff);\r\n        this.points = new THREE.Points(geometry, this.renderMaterial);\r\n        this.points.frustumCulled = false;\r\n        if (this.spriteIndexBufferAttribute != null) {\r\n            this.points.geometry.setAttribute('spriteIndex', this.spriteIndexBufferAttribute);\r\n        }\r\n        scene.add(this.points);\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.calculatePointSize = function (sceneIs3D) {\r\n        var imageSize = this.styles.sprites.imageSize;\r\n        if (this.texture) {\r\n            return sceneIs3D ? imageSize : this.spriteDimensions[0];\r\n        }\r\n        var n = this.worldSpacePointPositions != null\r\n            ? this.worldSpacePointPositions.length / constants_1.XYZ_NUM_ELEMENTS\r\n            : 1;\r\n        var SCALE = 200;\r\n        var LOG_BASE = 8;\r\n        var DIVISOR = 1.5;\r\n        var pointSize = SCALE / Math.log(n) / Math.log(LOG_BASE);\r\n        return sceneIs3D ? pointSize : pointSize / DIVISOR;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.createGeometry = function (pointCount) {\r\n        var n = pointCount;\r\n        this.pickingColors = new Float32Array(n * constants_1.RGBA_NUM_ELEMENTS);\r\n        {\r\n            var dst = 0;\r\n            for (var i = 0; i < n; i++) {\r\n                var c = new THREE.Color(i);\r\n                this.pickingColors[dst++] = c.r;\r\n                this.pickingColors[dst++] = c.g;\r\n                this.pickingColors[dst++] = c.b;\r\n                this.pickingColors[dst++] = 1;\r\n            }\r\n        }\r\n        var geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array([]), constants_1.XYZ_NUM_ELEMENTS));\r\n        geometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array([]), constants_1.RGBA_NUM_ELEMENTS));\r\n        geometry.setAttribute('scaleFactor', new THREE.BufferAttribute(new Float32Array([]), constants_1.INDEX_NUM_ELEMENTS));\r\n        geometry.computeVertexNormals();\r\n        return geometry;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.setFogDistances = function (sceneIs3D, nearestPointZ, farthestPointZ) {\r\n        var _a = this.styles.fog, threshold = _a.threshold, enabled = _a.enabled;\r\n        if (sceneIs3D && enabled) {\r\n            var n = this.worldSpacePointPositions.length / constants_1.XYZ_NUM_ELEMENTS;\r\n            this.fog.near = nearestPointZ;\r\n            var multiplier = 2 - Math.min(n, threshold) / threshold;\r\n            this.fog.far = farthestPointZ * multiplier;\r\n        }\r\n        else {\r\n            this.fog.near = Infinity;\r\n            this.fog.far = Infinity;\r\n        }\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.dispose = function () {\r\n        this.disposeGeometry();\r\n        this.disposeSpriteSheet();\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.disposeGeometry = function () {\r\n        if (this.points != null) {\r\n            this.scene.remove(this.points);\r\n            this.points.geometry.dispose();\r\n            this.points = null;\r\n            this.worldSpacePointPositions = null;\r\n        }\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.disposeSpriteSheet = function () {\r\n        if (this.texture) {\r\n            this.texture.dispose();\r\n        }\r\n        this.texture = null;\r\n        this.renderMaterial = null;\r\n        this.pickingMaterial = null;\r\n        this.spriteSheetImage = null;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.setScene = function (scene) {\r\n        this.scene = scene;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.setSpriteSheet = function (spriteSheetParams) {\r\n        var _this = this;\r\n        var spriteDimensions = spriteSheetParams.spriteDimensions, spriteIndices = spriteSheetParams.spriteIndices, onImageLoad = spriteSheetParams.onImageLoad;\r\n        var spriteSheet = spriteSheetParams.spritesheetImage;\r\n        if (typeof spriteSheet === 'string') {\r\n            var spriteSheetUrl = spriteSheet;\r\n            spriteSheet = new Image();\r\n            spriteSheet.src = spriteSheetUrl;\r\n        }\r\n        this.spriteSheetImage = spriteSheet;\r\n        this.texture = util.createTextureFromImage(this.spriteSheetImage, function () {\r\n            _this.spritesPerRow = _this.spriteSheetImage.width / spriteDimensions[0];\r\n            _this.spritesPerColumn =\r\n                _this.spriteSheetImage.height / spriteDimensions[1];\r\n            onImageLoad();\r\n        });\r\n        this.spriteDimensions = spriteDimensions;\r\n        this.spriteIndexBufferAttribute = new THREE.BufferAttribute(spriteIndices, constants_1.INDEX_NUM_ELEMENTS);\r\n        if (this.points != null) {\r\n            this.points.geometry.setAttribute('spriteIndex', this.spriteIndexBufferAttribute);\r\n        }\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.onPointPositionsChanged = function (newPositions) {\r\n        if (this.points != null) {\r\n            if (this.worldSpacePointPositions.length !== newPositions.length) {\r\n                this.disposeGeometry();\r\n            }\r\n        }\r\n        this.worldSpacePointPositions = newPositions;\r\n        if (this.points == null) {\r\n            this.createPointSprites(this.scene, newPositions);\r\n        }\r\n        if (this.spriteSheetParams) {\r\n            this.setSpriteSheet(this.spriteSheetParams);\r\n        }\r\n        this.renderMaterial = this.createRenderMaterial();\r\n        this.pickingMaterial = this.createPickingMaterial();\r\n        var positions = this.points\r\n            .geometry.getAttribute('position');\r\n        positions.array = newPositions;\r\n        positions.count = newPositions.length / constants_1.XYZ_NUM_ELEMENTS;\r\n        positions.needsUpdate = true;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.onPickingRender = function (rc) {\r\n        var sceneIs3D = rc.cameraType === render_1.CameraType.Perspective;\r\n        this.pickingMaterial.uniforms.spritesPerRow.value = this.spritesPerRow;\r\n        this.pickingMaterial.uniforms.spritesPerRow.value = this.spritesPerColumn;\r\n        this.pickingMaterial.uniforms.sizeAttenuation.value = sceneIs3D;\r\n        this.pickingMaterial.uniforms.pointSize.value = this.calculatePointSize(sceneIs3D);\r\n        this.points.material = this.pickingMaterial;\r\n        var colors = this.points.geometry.getAttribute('color');\r\n        colors.array = this.pickingColors;\r\n        colors.count = this.pickingColors.length / constants_1.RGBA_NUM_ELEMENTS;\r\n        colors.needsUpdate = true;\r\n        var scaleFactors = this.points\r\n            .geometry.getAttribute('scaleFactor');\r\n        scaleFactors.array = rc.pointScaleFactors;\r\n        scaleFactors.count = rc.pointScaleFactors.length;\r\n        scaleFactors.count = rc.pointScaleFactors.length / constants_1.INDEX_NUM_ELEMENTS;\r\n        scaleFactors.needsUpdate = true;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.onRender = function (rc) {\r\n        var sceneIs3D = rc.camera instanceof THREE.PerspectiveCamera;\r\n        this.setFogDistances(sceneIs3D, rc.nearestCameraSpacePointZ, rc.farthestCameraSpacePointZ);\r\n        this.scene.fog = this.fog;\r\n        this.scene.fog.color = new THREE.Color(rc.backgroundColor);\r\n        this.renderMaterial.uniforms.fogColor.value = this.scene.fog.color;\r\n        this.renderMaterial.uniforms.fogNear.value = this.fog.near;\r\n        this.renderMaterial.uniforms.fogFar.value = this.fog.far;\r\n        this.renderMaterial.uniforms.spritesPerRow.value = this.spritesPerRow;\r\n        this.renderMaterial.uniforms.spritesPerColumn.value = this.spritesPerColumn;\r\n        this.renderMaterial.uniforms.isImage.value = this.texture != null;\r\n        this.renderMaterial.uniforms.texture.value =\r\n            this.texture != null ? this.texture : this.standinTextureForPoints;\r\n        this.renderMaterial.uniforms.sizeAttenuation.value = sceneIs3D;\r\n        this.renderMaterial.uniforms.pointSize.value = this.calculatePointSize(sceneIs3D);\r\n        this.points.material = this.renderMaterial;\r\n        var colors = this.points.geometry.getAttribute('color');\r\n        this.renderColors = rc.pointColors;\r\n        colors.array = this.renderColors;\r\n        colors.count = this.renderColors.length / constants_1.RGBA_NUM_ELEMENTS;\r\n        colors.needsUpdate = true;\r\n        var scaleFactors = this.points\r\n            .geometry.getAttribute('scaleFactor');\r\n        scaleFactors.array = rc.pointScaleFactors;\r\n        scaleFactors.count = rc.pointScaleFactors.length / constants_1.INDEX_NUM_ELEMENTS;\r\n        scaleFactors.needsUpdate = true;\r\n    };\r\n    ScatterPlotVisualizerSprites.prototype.onResize = function (newWidth, newHeight) { };\r\n    return ScatterPlotVisualizerSprites;\r\n}());\r\nexports.ScatterPlotVisualizerSprites = ScatterPlotVisualizerSprites;\r\n"},"lineCount":244}},"error":null,"hash":"3a4bcedfdd6ff179f033d4331e37fd26","cacheData":{"env":{}}}