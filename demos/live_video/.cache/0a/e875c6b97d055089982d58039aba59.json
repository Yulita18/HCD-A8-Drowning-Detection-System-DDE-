{"id":"node_modules/@tensorflow-models/pose-detection/posenet/calculators/decode_single_pose.js","dependencies":[{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\posenet\\calculators\\decode_single_pose.js.map","includedInParent":true,"mtime":1634828521867},{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\package.json","includedInParent":true,"mtime":1634830278911},{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\.babelrc","includedInParent":true,"mtime":1634828519177},{"name":"../../constants","loc":{"line":54,"column":26},"parent":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\posenet\\calculators\\decode_single_pose.js","resolved":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\constants.js"},{"name":"./decode_single_pose_util","loc":{"line":55,"column":40},"parent":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\posenet\\calculators\\decode_single_pose.js","resolved":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\posenet\\calculators\\decode_single_pose_util.js"}],"generated":{"js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar constants_1 = require(\"../../constants\");\r\nvar decode_single_pose_util_1 = require(\"./decode_single_pose_util\");\r\n/**\r\n * Detects a single pose and finds its parts from part scores and offset\r\n * vectors. It returns a single pose detection. It works as follows:\r\n * argmax2d is done on the scores to get the y and x index in the heatmap\r\n * with the highest score for each part, which is essentially where the\r\n * part is most likely to exist. This produces a tensor of size 17x2, with\r\n * each row being the y and x index in the heatmap for each keypoint.\r\n * The offset vector for each part is retrieved by getting the\r\n * y and x from the offsets corresponding to the y and x index in the\r\n * heatmap for that part. This produces a tensor of size 17x2, with each\r\n * row being the offset vector for the corresponding keypoint.\r\n * To get the keypoint, each partâ€™s heatmap y and x are multiplied\r\n * by the output stride then added to their corresponding offset vector,\r\n * which is in the same scale as the original image.\r\n *\r\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\r\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\r\n * object part at position `(y, x)`.\r\n *\r\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\r\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\r\n * short range offset vector of the `k`-th  object part at heatmap\r\n * position `(y, x)`.\r\n *\r\n * @param outputStride The output stride that was used when feed-forwarding\r\n * through the PoseNet model.  Must be 32, 16, or 8.\r\n *\r\n * @return A promise that resolves with single pose with a confidence score,\r\n * which contains an array of keypoints indexed by part id, each with a score\r\n * and position.\r\n */\r\nfunction decodeSinglePose(heatmapScores, offsets, outputStride) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var totalScore, heatmapValues, allTensorBuffers, scoresBuffer, offsetsBuffer, heatmapValuesBuffer, offsetPoints, offsetPointsBuffer, keypointConfidence, keypoints;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    totalScore = 0.0;\r\n                    heatmapValues = decode_single_pose_util_1.argmax2d(heatmapScores);\r\n                    return [4 /*yield*/, Promise.all([heatmapScores.buffer(), offsets.buffer(), heatmapValues.buffer()])];\r\n                case 1:\r\n                    allTensorBuffers = _a.sent();\r\n                    scoresBuffer = allTensorBuffers[0];\r\n                    offsetsBuffer = allTensorBuffers[1];\r\n                    heatmapValuesBuffer = allTensorBuffers[2];\r\n                    offsetPoints = decode_single_pose_util_1.getOffsetPoints(heatmapValuesBuffer, outputStride, offsetsBuffer);\r\n                    return [4 /*yield*/, offsetPoints.buffer()];\r\n                case 2:\r\n                    offsetPointsBuffer = _a.sent();\r\n                    keypointConfidence = Array.from(decode_single_pose_util_1.getPointsConfidence(scoresBuffer, heatmapValuesBuffer));\r\n                    keypoints = keypointConfidence.map(function (score, keypointId) {\r\n                        totalScore += score;\r\n                        return {\r\n                            y: offsetPointsBuffer.get(keypointId, 0),\r\n                            x: offsetPointsBuffer.get(keypointId, 1),\r\n                            score: score,\r\n                            name: constants_1.COCO_KEYPOINTS[keypointId]\r\n                        };\r\n                    });\r\n                    heatmapValues.dispose();\r\n                    offsetPoints.dispose();\r\n                    return [2 /*return*/, { keypoints: keypoints, score: totalScore / keypoints.length }];\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.decodeSinglePose = decodeSinglePose;\r\n"},"sourceMaps":{"js":{"version":3,"file":"decode_single_pose.js","sourceRoot":"","sources":["../../../src/posenet/calculators/decode_single_pose.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIH,6CAA+C;AAK/C,qEAAyF;AAEzF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,SAAsB,gBAAgB,CAClC,aAA0B,EAAE,OAAoB,EAChD,YAAiC;;;;;;oBAC/B,UAAU,GAAG,GAAG,CAAC;oBAEf,aAAa,GAAG,kCAAQ,CAAC,aAAa,CAAC,CAAC;oBAErB,qBAAM,OAAO,CAAC,GAAG,CACtC,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,MAAM,EAAE,EAAE,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,EAAA;;oBADjE,gBAAgB,GAAG,SAC8C;oBAEjE,YAAY,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBACnC,aAAa,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBACpC,mBAAmB,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBAE1C,YAAY,GACd,yCAAe,CAAC,mBAAmB,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;oBAC3C,qBAAM,YAAY,CAAC,MAAM,EAAE,EAAA;;oBAAhD,kBAAkB,GAAG,SAA2B;oBAEhD,kBAAkB,GACpB,KAAK,CAAC,IAAI,CAAC,6CAAmB,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC;oBAEjE,SAAS,GAAG,kBAAkB,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,UAAU;wBACzD,UAAU,IAAI,KAAK,CAAC;wBACpB,OAAO;4BACL,CAAC,EAAE,kBAAkB,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;4BACxC,CAAC,EAAE,kBAAkB,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;4BACxC,KAAK,OAAA;4BACL,IAAI,EAAE,0BAAc,CAAC,UAAU,CAAC;yBACjC,CAAC;oBACJ,CAAC,CAAC,CAAC;oBAEH,aAAa,CAAC,OAAO,EAAE,CAAC;oBACxB,YAAY,CAAC,OAAO,EAAE,CAAC;oBAEvB,sBAAO,EAAC,SAAS,WAAA,EAAE,KAAK,EAAE,UAAU,GAAG,SAAS,CAAC,MAAM,EAAC,EAAC;;;;CAC1D;AAnCD,4CAmCC","sourcesContent":[null]}},"error":null,"hash":"d0e6ad155682bd697b82f532e714b98d","cacheData":{"env":{}}}