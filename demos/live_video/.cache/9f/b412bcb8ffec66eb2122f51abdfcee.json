{"id":"node_modules/scatter-gl/dist/label.js","dependencies":[{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\package.json","includedInParent":true,"mtime":1636883241532},{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\.babelrc","includedInParent":true,"mtime":1634828519177},{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\scatter-gl\\package.json","includedInParent":true,"mtime":1634828546977}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CollisionGrid = (function () {\r\n    function CollisionGrid(bound, cellWidth, cellHeight) {\r\n        this.bound = bound;\r\n        this.cellWidth = cellWidth;\r\n        this.cellHeight = cellHeight;\r\n        this.numHorizCells = Math.ceil(this.boundWidth(bound) / cellWidth);\r\n        this.numVertCells = Math.ceil(this.boundHeight(bound) / cellHeight);\r\n        this.grid = new Array(this.numHorizCells * this.numVertCells);\r\n    }\r\n    CollisionGrid.prototype.boundWidth = function (bound) {\r\n        return bound.hiX - bound.loX;\r\n    };\r\n    CollisionGrid.prototype.boundHeight = function (bound) {\r\n        return bound.hiY - bound.loY;\r\n    };\r\n    CollisionGrid.prototype.boundsIntersect = function (a, b) {\r\n        return !(a.loX > b.hiX || a.loY > b.hiY || a.hiX < b.loX || a.hiY < b.loY);\r\n    };\r\n    CollisionGrid.prototype.insert = function (bound, justTest) {\r\n        if (justTest === void 0) { justTest = false; }\r\n        if (bound.hiX < this.bound.loX ||\r\n            bound.loX > this.bound.hiX ||\r\n            bound.hiY < this.bound.loY ||\r\n            bound.loY > this.bound.hiY) {\r\n            return false;\r\n        }\r\n        var minCellX = this.getCellX(bound.loX);\r\n        var maxCellX = this.getCellX(bound.hiX);\r\n        var minCellY = this.getCellY(bound.loY);\r\n        var maxCellY = this.getCellY(bound.hiY);\r\n        var baseIdx = minCellY * this.numHorizCells + minCellX;\r\n        var idx = baseIdx;\r\n        for (var j = minCellY; j <= maxCellY; j++) {\r\n            for (var i = minCellX; i <= maxCellX; i++) {\r\n                var cell = this.grid[idx++];\r\n                if (cell) {\r\n                    for (var k = 0; k < cell.length; k++) {\r\n                        if (this.boundsIntersect(bound, cell[k])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            idx += this.numHorizCells - (maxCellX - minCellX + 1);\r\n        }\r\n        if (justTest) {\r\n            return true;\r\n        }\r\n        idx = baseIdx;\r\n        for (var j = minCellY; j <= maxCellY; j++) {\r\n            for (var i = minCellX; i <= maxCellX; i++) {\r\n                if (!this.grid[idx]) {\r\n                    this.grid[idx] = [bound];\r\n                }\r\n                else {\r\n                    this.grid[idx].push(bound);\r\n                }\r\n                idx++;\r\n            }\r\n            idx += this.numHorizCells - (maxCellX - minCellX + 1);\r\n        }\r\n        return true;\r\n    };\r\n    CollisionGrid.prototype.getCellX = function (x) {\r\n        return Math.floor((x - this.bound.loX) / this.cellWidth);\r\n    };\r\n    CollisionGrid.prototype.getCellY = function (y) {\r\n        return Math.floor((y - this.bound.loY) / this.cellHeight);\r\n    };\r\n    return CollisionGrid;\r\n}());\r\nexports.CollisionGrid = CollisionGrid;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/scatter-gl/dist/label.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}}],"sources":{"node_modules/scatter-gl/dist/label.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar CollisionGrid = (function () {\r\n    function CollisionGrid(bound, cellWidth, cellHeight) {\r\n        this.bound = bound;\r\n        this.cellWidth = cellWidth;\r\n        this.cellHeight = cellHeight;\r\n        this.numHorizCells = Math.ceil(this.boundWidth(bound) / cellWidth);\r\n        this.numVertCells = Math.ceil(this.boundHeight(bound) / cellHeight);\r\n        this.grid = new Array(this.numHorizCells * this.numVertCells);\r\n    }\r\n    CollisionGrid.prototype.boundWidth = function (bound) {\r\n        return bound.hiX - bound.loX;\r\n    };\r\n    CollisionGrid.prototype.boundHeight = function (bound) {\r\n        return bound.hiY - bound.loY;\r\n    };\r\n    CollisionGrid.prototype.boundsIntersect = function (a, b) {\r\n        return !(a.loX > b.hiX || a.loY > b.hiY || a.hiX < b.loX || a.hiY < b.loY);\r\n    };\r\n    CollisionGrid.prototype.insert = function (bound, justTest) {\r\n        if (justTest === void 0) { justTest = false; }\r\n        if (bound.hiX < this.bound.loX ||\r\n            bound.loX > this.bound.hiX ||\r\n            bound.hiY < this.bound.loY ||\r\n            bound.loY > this.bound.hiY) {\r\n            return false;\r\n        }\r\n        var minCellX = this.getCellX(bound.loX);\r\n        var maxCellX = this.getCellX(bound.hiX);\r\n        var minCellY = this.getCellY(bound.loY);\r\n        var maxCellY = this.getCellY(bound.hiY);\r\n        var baseIdx = minCellY * this.numHorizCells + minCellX;\r\n        var idx = baseIdx;\r\n        for (var j = minCellY; j <= maxCellY; j++) {\r\n            for (var i = minCellX; i <= maxCellX; i++) {\r\n                var cell = this.grid[idx++];\r\n                if (cell) {\r\n                    for (var k = 0; k < cell.length; k++) {\r\n                        if (this.boundsIntersect(bound, cell[k])) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            idx += this.numHorizCells - (maxCellX - minCellX + 1);\r\n        }\r\n        if (justTest) {\r\n            return true;\r\n        }\r\n        idx = baseIdx;\r\n        for (var j = minCellY; j <= maxCellY; j++) {\r\n            for (var i = minCellX; i <= maxCellX; i++) {\r\n                if (!this.grid[idx]) {\r\n                    this.grid[idx] = [bound];\r\n                }\r\n                else {\r\n                    this.grid[idx].push(bound);\r\n                }\r\n                idx++;\r\n            }\r\n            idx += this.numHorizCells - (maxCellX - minCellX + 1);\r\n        }\r\n        return true;\r\n    };\r\n    CollisionGrid.prototype.getCellX = function (x) {\r\n        return Math.floor((x - this.bound.loX) / this.cellWidth);\r\n    };\r\n    CollisionGrid.prototype.getCellY = function (y) {\r\n        return Math.floor((y - this.bound.loY) / this.cellHeight);\r\n    };\r\n    return CollisionGrid;\r\n}());\r\nexports.CollisionGrid = CollisionGrid;\r\n"},"lineCount":75}},"error":null,"hash":"cef25ecdcadd7d031f4b6c0ec435dd10","cacheData":{"env":{}}}