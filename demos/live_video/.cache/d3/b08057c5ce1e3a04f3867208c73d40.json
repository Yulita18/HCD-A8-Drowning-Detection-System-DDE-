{"id":"node_modules/@tensorflow-models/pose-detection/shared/calculators/convert_image_to_tensor.ts","dependencies":[{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\package.json","includedInParent":true,"mtime":1634830278911},{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\.babelrc","includedInParent":true,"mtime":1634828519177},{"name":"@tensorflow/tfjs-core","loc":{"line":26,"column":30},"parent":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\convert_image_to_tensor.ts","resolved":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\index.js"},{"name":"./image_utils","loc":{"line":27,"column":28},"parent":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\convert_image_to_tensor.ts","resolved":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\image_utils.ts"}],"generated":{"js":"\"use strict\";\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nexports.__esModule = true;\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nvar tf = __importStar(require(\"@tensorflow/tfjs-core\"));\r\nvar image_utils_1 = require(\"./image_utils\");\r\n/**\r\n * Convert an image or part of it to an image tensor.\r\n *\r\n * @param image An image, video frame or image tensor.\r\n * @param config\r\n *      inputResolution: The target height and width.\r\n *      keepAspectRatio?: Whether target tensor should keep aspect ratio.\r\n * @param normRect A normalized rectangle, representing the subarea to crop from\r\n *      the image. If normRect is provided, the returned image tensor represents\r\n *      the subarea.\r\n */\r\nfunction convertImageToTensor(image, config, normRect) {\r\n    var inputResolution = config.inputResolution, keepAspectRatio = config.keepAspectRatio;\r\n    // Ref:\r\n    // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/tensor/image_to_tensor_calculator.cc\r\n    var imageSize = image_utils_1.getImageSize(image);\r\n    var roi = image_utils_1.getRoi(imageSize, normRect);\r\n    var padding = image_utils_1.padRoi(roi, inputResolution, keepAspectRatio);\r\n    var imageTensor = tf.tidy(function () {\r\n        var $image = image_utils_1.toImageTensor(image);\r\n        var transformMatrix = tf.tensor2d(image_utils_1.getProjectiveTransformMatrix(roi, imageSize, false, inputResolution), [1, 8]);\r\n        var imageTransformed = tf.image.transform(\r\n        // tslint:disable-next-line: no-unnecessary-type-assertion\r\n        tf.expandDims(tf.cast($image, 'float32')), transformMatrix, 'bilinear', 'nearest', 0, [inputResolution.height, inputResolution.width]);\r\n        return imageTransformed;\r\n    });\r\n    return { imageTensor: imageTensor, padding: padding };\r\n}\r\nexports.convertImageToTensor = convertImageToTensor;\r\n"},"sourceMaps":{"js":{"version":3,"file":"convert_image_to_tensor.js","sourceRoot":"","sources":["node_modules/@tensorflow-models/pose-detection/shared/calculators/convert_image_to_tensor.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;GAeG;AACH,wDAA4C;AAE5C,6CAAwG;AAKxG;;;;;;;;;;GAUG;AACH,SAAgB,oBAAoB,CAChC,KAAoB,EAAE,MAA2B,EACjD,QAAe;IACV,IAAA,wCAAe,EAAE,wCAAe,CAAW;IAElD,OAAO;IACP,6GAA6G;IAC7G,IAAM,SAAS,GAAG,0BAAY,CAAC,KAAK,CAAC,CAAC;IACtC,IAAM,GAAG,GAAG,oBAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACxC,IAAM,OAAO,GAAG,oBAAM,CAAC,GAAG,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;IAE9D,IAAM,WAAW,GAAG,EAAE,CAAC,IAAI,CAAC;QAC1B,IAAM,MAAM,GAAG,2BAAa,CAAC,KAAK,CAAC,CAAC;QAEpC,IAAM,eAAe,GAAG,EAAE,CAAC,QAAQ,CAC/B,0CAA4B,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,eAAe,CAAC,EACpE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEZ,IAAM,gBAAgB,GAAG,EAAE,CAAC,KAAK,CAAC,SAAS;QACvC,0DAA0D;QAC1D,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAgB,EACxD,eAAe,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,EACzC,CAAC,eAAe,CAAC,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;QAErD,OAAO,gBAAgB,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,OAAO,EAAC,WAAW,aAAA,EAAE,OAAO,SAAA,EAAC,CAAC;AAChC,CAAC;AA5BD,oDA4BC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport * as tf from '@tensorflow/tfjs-core';\r\n\r\nimport {getImageSize, getProjectiveTransformMatrix, getRoi, padRoi, toImageTensor} from './image_utils';\r\nimport {DetectorInput, Padding} from './interfaces/common_interfaces';\r\nimport {ImageToTensorConfig} from './interfaces/config_interfaces';\r\nimport {Rect} from './interfaces/shape_interfaces';\r\n\r\n/**\r\n * Convert an image or part of it to an image tensor.\r\n *\r\n * @param image An image, video frame or image tensor.\r\n * @param config\r\n *      inputResolution: The target height and width.\r\n *      keepAspectRatio?: Whether target tensor should keep aspect ratio.\r\n * @param normRect A normalized rectangle, representing the subarea to crop from\r\n *      the image. If normRect is provided, the returned image tensor represents\r\n *      the subarea.\r\n */\r\nexport function convertImageToTensor(\r\n    image: DetectorInput, config: ImageToTensorConfig,\r\n    normRect?: Rect): {imageTensor: tf.Tensor4D, padding: Padding} {\r\n  const {inputResolution, keepAspectRatio} = config;\r\n\r\n  // Ref:\r\n  // https://github.com/google/mediapipe/blob/master/mediapipe/calculators/tensor/image_to_tensor_calculator.cc\r\n  const imageSize = getImageSize(image);\r\n  const roi = getRoi(imageSize, normRect);\r\n  const padding = padRoi(roi, inputResolution, keepAspectRatio);\r\n\r\n  const imageTensor = tf.tidy(() => {\r\n    const $image = toImageTensor(image);\r\n\r\n    const transformMatrix = tf.tensor2d(\r\n        getProjectiveTransformMatrix(roi, imageSize, false, inputResolution),\r\n        [1, 8]);\r\n\r\n    const imageTransformed = tf.image.transform(\r\n        // tslint:disable-next-line: no-unnecessary-type-assertion\r\n        tf.expandDims(tf.cast($image, 'float32')) as tf.Tensor4D,\r\n        transformMatrix, 'bilinear', 'nearest', 0,\r\n        [inputResolution.height, inputResolution.width]);\r\n\r\n    return imageTransformed;\r\n  });\r\n\r\n  return {imageTensor, padding};\r\n}\r\n"]}},"error":null,"hash":"e81dd2a9b8843586eedde933eb287b71","cacheData":{"env":{}}}