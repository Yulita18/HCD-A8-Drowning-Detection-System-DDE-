{"id":"node_modules/@tensorflow-models/pose-detection/shared/calculators/detection_to_rect.ts","dependencies":[{"name":"C:\\xampp\\htdocs\\tfjs-models\\pose-detection\\demos\\live_video\\package.json","includedInParent":true,"mtime":1634211906094},{"name":"C:\\xampp\\htdocs\\tfjs-models\\pose-detection\\demos\\live_video\\.babelrc","includedInParent":true,"mtime":1634209725400},{"name":"./image_utils","loc":{"line":19,"column":28},"parent":"C:\\xampp\\htdocs\\tfjs-models\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\detection_to_rect.ts","resolved":"C:\\xampp\\htdocs\\tfjs-models\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\image_utils.ts"}],"generated":{"js":"\"use strict\";\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nexports.__esModule = true;\r\nvar image_utils_1 = require(\"./image_utils\");\r\n// ref:\r\n// https://github.com/google/mediapipe/blob/master/mediapipe/calculators/util/detections_to_rects_calculator.cc\r\nfunction computeRotation(detection, imageSize, config) {\r\n    var locationData = detection.locationData;\r\n    var startKeypoint = config.rotationVectorStartKeypointIndex;\r\n    var endKeypoint = config.rotationVectorEndKeypointIndex;\r\n    var targetAngle;\r\n    if (config.rotationVectorTargetAngle) {\r\n        targetAngle = config.rotationVectorTargetAngle;\r\n    }\r\n    else {\r\n        targetAngle = Math.PI * config.rotationVectorTargetAngleDegree / 180;\r\n    }\r\n    var x0 = locationData.relativeKeypoints[startKeypoint].x * imageSize.width;\r\n    var y0 = locationData.relativeKeypoints[startKeypoint].y * imageSize.height;\r\n    var x1 = locationData.relativeKeypoints[endKeypoint].x * imageSize.width;\r\n    var y1 = locationData.relativeKeypoints[endKeypoint].y * imageSize.height;\r\n    var rotation = image_utils_1.normalizeRadians(targetAngle - Math.atan2(-(y1 - y0), x1 - x0));\r\n    return rotation;\r\n}\r\nexports.computeRotation = computeRotation;\r\n"},"sourceMaps":{"js":{"version":3,"file":"detection_to_rect.js","sourceRoot":"","sources":["node_modules/@tensorflow-models/pose-detection/shared/calculators/detection_to_rect.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;AAEH,6CAA+C;AAK/C,OAAO;AACP,+GAA+G;AAC/G,SAAgB,eAAe,CAC3B,SAAoB,EAAE,SAAoB,EAAE,MAA6B;IAC3E,IAAM,YAAY,GAAG,SAAS,CAAC,YAAY,CAAC;IAC5C,IAAM,aAAa,GAAG,MAAM,CAAC,gCAAgC,CAAC;IAC9D,IAAM,WAAW,GAAG,MAAM,CAAC,8BAA8B,CAAC;IAE1D,IAAI,WAAW,CAAC;IAEhB,IAAI,MAAM,CAAC,yBAAyB,EAAE;QACpC,WAAW,GAAG,MAAM,CAAC,yBAAyB,CAAC;KAChD;SAAM;QACL,WAAW,GAAG,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,+BAA+B,GAAG,GAAG,CAAC;KACtE;IAED,IAAM,EAAE,GAAG,YAAY,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC;IAC7E,IAAM,EAAE,GAAG,YAAY,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;IAC9E,IAAM,EAAE,GAAG,YAAY,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC;IAC3E,IAAM,EAAE,GAAG,YAAY,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;IAE5E,IAAM,QAAQ,GACV,8BAAgB,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;IAEpE,OAAO,QAAQ,CAAC;AAClB,CAAC;AAvBD,0CAuBC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport {normalizeRadians} from './image_utils';\r\nimport {ImageSize} from './interfaces/common_interfaces';\r\nimport {DetectionToRectConfig} from './interfaces/config_interfaces';\r\nimport {Detection} from './interfaces/shape_interfaces';\r\n\r\n// ref:\r\n// https://github.com/google/mediapipe/blob/master/mediapipe/calculators/util/detections_to_rects_calculator.cc\r\nexport function computeRotation(\r\n    detection: Detection, imageSize: ImageSize, config: DetectionToRectConfig) {\r\n  const locationData = detection.locationData;\r\n  const startKeypoint = config.rotationVectorStartKeypointIndex;\r\n  const endKeypoint = config.rotationVectorEndKeypointIndex;\r\n\r\n  let targetAngle;\r\n\r\n  if (config.rotationVectorTargetAngle) {\r\n    targetAngle = config.rotationVectorTargetAngle;\r\n  } else {\r\n    targetAngle = Math.PI * config.rotationVectorTargetAngleDegree / 180;\r\n  }\r\n\r\n  const x0 = locationData.relativeKeypoints[startKeypoint].x * imageSize.width;\r\n  const y0 = locationData.relativeKeypoints[startKeypoint].y * imageSize.height;\r\n  const x1 = locationData.relativeKeypoints[endKeypoint].x * imageSize.width;\r\n  const y1 = locationData.relativeKeypoints[endKeypoint].y * imageSize.height;\r\n\r\n  const rotation =\r\n      normalizeRadians(targetAngle - Math.atan2(-(y1 - y0), x1 - x0));\r\n\r\n  return rotation;\r\n}\r\n"]}},"error":null,"hash":"d09e226142294fcc6aed4d78b92e68f3","cacheData":{"env":{}}}