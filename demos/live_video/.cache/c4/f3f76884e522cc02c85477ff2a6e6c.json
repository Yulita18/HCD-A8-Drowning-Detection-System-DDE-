{"id":"node_modules/@tensorflow-models/pose-detection/shared/calculators/detector_inference.ts","dependencies":[{"name":"C:\\xampp\\htdocs\\tfjs-models\\pose-detection\\demos\\live_video\\package.json","includedInParent":true,"mtime":1634211906094},{"name":"C:\\xampp\\htdocs\\tfjs-models\\pose-detection\\demos\\live_video\\.babelrc","includedInParent":true,"mtime":1634209725400},{"name":"@tensorflow/tfjs-core","loc":{"line":10,"column":30},"parent":"C:\\xampp\\htdocs\\tfjs-models\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\detector_inference.ts","resolved":"C:\\xampp\\htdocs\\tfjs-models\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow\\tfjs-core\\dist\\index.js"},{"name":"./split_detection_result","loc":{"line":11,"column":39},"parent":"C:\\xampp\\htdocs\\tfjs-models\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\detector_inference.ts","resolved":"C:\\xampp\\htdocs\\tfjs-models\\pose-detection\\demos\\live_video\\node_modules\\@tensorflow-models\\pose-detection\\shared\\calculators\\split_detection_result.ts"}],"generated":{"js":"\"use strict\";\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nexports.__esModule = true;\r\nvar tf = __importStar(require(\"@tensorflow/tfjs-core\"));\r\nvar split_detection_result_1 = require(\"./split_detection_result\");\r\nfunction detectorInference(imageTensor, poseDetectorModel) {\r\n    return tf.tidy(function () {\r\n        var detectionResult = poseDetectorModel.predict(imageTensor);\r\n        var _a = split_detection_result_1.splitDetectionResult(detectionResult), scores = _a[0], rawBoxes = _a[1];\r\n        // Shape [896, 12]\r\n        var rawBoxes2d = tf.squeeze(rawBoxes);\r\n        // Shape [896]\r\n        var scores1d = tf.squeeze(scores);\r\n        return { boxes: rawBoxes2d, scores: scores1d };\r\n    });\r\n}\r\nexports.detectorInference = detectorInference;\r\n"},"sourceMaps":{"js":{"version":3,"file":"detector_inference.js","sourceRoot":"","sources":["node_modules/@tensorflow-models/pose-detection/shared/calculators/detector_inference.ts"],"names":[],"mappings":";;;;;;;;;AAiBA,wDAA4C;AAC5C,mEAA8D;AAO9D,SAAgB,iBAAiB,CAC7B,WAAwB,EACxB,iBAAoC;IACtC,OAAO,EAAE,CAAC,IAAI,CAAC;QACb,IAAM,eAAe,GACjB,iBAAiB,CAAC,OAAO,CAAC,WAAW,CAAgB,CAAC;QACpD,IAAA,mEAA0D,EAAzD,cAAM,EAAE,gBAAiD,CAAC;QACjE,kBAAkB;QAClB,IAAM,UAAU,GAAG,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACxC,cAAc;QACd,IAAM,QAAQ,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEpC,OAAO,EAAC,KAAK,EAAE,UAAyB,EAAE,MAAM,EAAE,QAAuB,EAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;AACL,CAAC;AAdD,8CAcC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport * as tfconv from '@tensorflow/tfjs-converter';\r\nimport * as tf from '@tensorflow/tfjs-core';\r\nimport {splitDetectionResult} from './split_detection_result';\r\n\r\nexport type DetectorInferenceResult = {\r\n  boxes: tf.Tensor2D,\r\n  scores: tf.Tensor1D\r\n};\r\n\r\nexport function detectorInference(\r\n    imageTensor: tf.Tensor4D,\r\n    poseDetectorModel: tfconv.GraphModel): DetectorInferenceResult {\r\n  return tf.tidy(() => {\r\n    const detectionResult =\r\n        poseDetectorModel.predict(imageTensor) as tf.Tensor3D;\r\n    const [scores, rawBoxes] = splitDetectionResult(detectionResult);\r\n    // Shape [896, 12]\r\n    const rawBoxes2d = tf.squeeze(rawBoxes);\r\n    // Shape [896]\r\n    const scores1d = tf.squeeze(scores);\r\n\r\n    return {boxes: rawBoxes2d as tf.Tensor2D, scores: scores1d as tf.Tensor1D};\r\n  });\r\n}\r\n"]}},"error":null,"hash":"2dacc4006270f6a0f9a4a38f0536528f","cacheData":{"env":{}}}