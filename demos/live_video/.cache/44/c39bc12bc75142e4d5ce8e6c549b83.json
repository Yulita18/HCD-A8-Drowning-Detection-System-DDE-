{"id":"node_modules/@tensorflow-models/pose-detection/shared/calculators/normalized_keypoints_to_keypoints.ts","dependencies":[{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\package.json","includedInParent":true,"mtime":1634211906094},{"name":"C:\\xampp\\htdocs\\pose-detection\\demos\\live_video\\.babelrc","includedInParent":true,"mtime":1634209725400}],"generated":{"js":"\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nexports.__esModule = true;\r\nfunction normalizedKeypointsToKeypoints(normalizedKeypoints, imageSize) {\r\n    return normalizedKeypoints.map(function (normalizedKeypoint) {\r\n        var keypoint = __assign({}, normalizedKeypoint, { x: normalizedKeypoint.x * imageSize.width, y: normalizedKeypoint.y * imageSize.height });\r\n        if (normalizedKeypoint.z != null) {\r\n            // Scale z the same way as x (using image width).\r\n            keypoint.z = normalizedKeypoint.z * imageSize.width;\r\n        }\r\n        return keypoint;\r\n    });\r\n}\r\nexports.normalizedKeypointsToKeypoints = normalizedKeypointsToKeypoints;\r\n"},"sourceMaps":{"js":{"version":3,"file":"normalized_keypoints_to_keypoints.js","sourceRoot":"","sources":["node_modules/@tensorflow-models/pose-detection/shared/calculators/normalized_keypoints_to_keypoints.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAkBA,SAAgB,8BAA8B,CAC1C,mBAA+B,EAAE,SAAoB;IACvD,OAAO,mBAAmB,CAAC,GAAG,CAAC,UAAA,kBAAkB;QAC/C,IAAM,QAAQ,gBACT,kBAAkB,IACrB,CAAC,EAAE,kBAAkB,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK,EACzC,CAAC,EAAE,kBAAkB,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,GAC3C,CAAC;QAEF,IAAI,kBAAkB,CAAC,CAAC,IAAI,IAAI,EAAE;YAChC,iDAAiD;YACjD,QAAQ,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC;SACrD;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC;AAhBD,wEAgBC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\nimport {ImageSize, Keypoint} from './interfaces/common_interfaces';\r\n\r\nexport function normalizedKeypointsToKeypoints(\r\n    normalizedKeypoints: Keypoint[], imageSize: ImageSize): Keypoint[] {\r\n  return normalizedKeypoints.map(normalizedKeypoint => {\r\n    const keypoint = {\r\n      ...normalizedKeypoint,\r\n      x: normalizedKeypoint.x * imageSize.width,\r\n      y: normalizedKeypoint.y * imageSize.height\r\n    };\r\n\r\n    if (normalizedKeypoint.z != null) {\r\n      // Scale z the same way as x (using image width).\r\n      keypoint.z = normalizedKeypoint.z * imageSize.width;\r\n    }\r\n\r\n    return keypoint;\r\n  });\r\n}\r\n"]}},"error":null,"hash":"2ba04a9ae60bc419ecaabf3c0cf34f8a","cacheData":{"env":{}}}